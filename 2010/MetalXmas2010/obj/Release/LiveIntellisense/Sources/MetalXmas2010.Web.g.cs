//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MetalXmas2010
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
    }
}
namespace MetalXmas2010.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using MetalXmas2010.Web.Model;
    
    
    /// <summary>
    /// The domain context corresponding to the 'MetalXmasService' domain service.
    /// </summary>
    public sealed partial class MetalXmasContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MetalXmasContext"/> class.
        /// </summary>
        public MetalXmasContext() : 
                this(new WebDomainClient<IMetalXmasServiceContract>(new Uri("MetalXmas2010-Web-MetalXmasService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MetalXmasContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The MetalXmasService service URI.</param>
        public MetalXmasContext(Uri serviceUri) : 
                this(new WebDomainClient<IMetalXmasServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MetalXmasContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public MetalXmasContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Comment"/> entities that have been loaded into this <see cref="MetalXmasContext"/> instance.
        /// </summary>
        public EntitySet<Comment> Comments
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Comment>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Comment"/> entities using the 'GetComments' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Comment"/> entities.</returns>
        public EntityQuery<Comment> GetCommentsQuery()
        {
            this.ValidateMethod("GetCommentsQuery", null);
            return base.CreateQuery<Comment>("GetComments", null, false, true);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new MetalXmasContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'MetalXmasService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IMetalXmasServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetComments' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MetalXmasService/GetCommentsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MetalXmasService/GetComments", ReplyAction="http://tempuri.org/MetalXmasService/GetCommentsResponse")]
            [WebGet()]
            IAsyncResult BeginGetComments(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetComments'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetComments'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetComments' operation.</returns>
            QueryResult<Comment> EndGetComments(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MetalXmasService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MetalXmasService/SubmitChanges", ReplyAction="http://tempuri.org/MetalXmasService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class MetalXmasContextEntityContainer : EntityContainer
        {
            
            public MetalXmasContextEntityContainer()
            {
                this.CreateEntitySet<Comment>(EntitySetOperations.Add);
            }
        }
    }
}
namespace MetalXmas2010.Web.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// The 'Comment' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MetalXmas2010.Web.Model")]
    public sealed partial class Comment : Entity
    {
        
        private int _commentID;
        
        private string _comments;
        
        private string _location;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCommentIDChanging(int value);
        partial void OnCommentIDChanged();
        partial void OnCommentsChanging(string value);
        partial void OnCommentsChanged();
        partial void OnLocationChanging(string value);
        partial void OnLocationChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Comment"/> class.
        /// </summary>
        public Comment()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CommentID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int CommentID
        {
            get
            {
                return this._commentID;
            }
            set
            {
                if ((this._commentID != value))
                {
                    this.OnCommentIDChanging(value);
                    this.ValidateProperty("CommentID", value);
                    this._commentID = value;
                    this.RaisePropertyChanged("CommentID");
                    this.OnCommentIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Comments' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Comments
        {
            get
            {
                return this._comments;
            }
            set
            {
                if ((this._comments != value))
                {
                    this.OnCommentsChanging(value);
                    this.RaiseDataMemberChanging("Comments");
                    this.ValidateProperty("Comments", value);
                    this._comments = value;
                    this.RaiseDataMemberChanged("Comments");
                    this.OnCommentsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Location' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Location
        {
            get
            {
                return this._location;
            }
            set
            {
                if ((this._location != value))
                {
                    this.OnLocationChanging(value);
                    this.RaiseDataMemberChanging("Location");
                    this.ValidateProperty("Location", value);
                    this._location = value;
                    this.RaiseDataMemberChanged("Location");
                    this.OnLocationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._commentID;
        }
    }
}
